---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by trifan.
--- DateTime: 03/04/2018 16:27
---


local instance
local cjson = require "cjson"

local WsServer = {}

function WsServer:new(o)
    o = o or {}
    setmetatable(o, self)
    self.__index = self
    return o
end

function WsServer:createServer()
    local server = require "resty.websocket.server"
    local wb, err = server:new{
        timeout = 5000,
        max_payload_len = 65535
    }
    if not wb then
        ngx.log(ngx.ERR, "failed to new websocket: ", err)
        return ngx.exit(444)
    end

    self:enhanceWsClient(wb)
    self.wb = wb
    return self.wb
end

function WsServer:start()
    while true do
        local data, typ, err = self.wb:recv_frame()
        if self.wb.fatal then
            ngx.log(ngx.ERR, "failed to receive frame: ", err)
            return ngx.exit(444)
        end

        if not data then
            local bytes, err = self.wb:send_ping()
            if not bytes then
                ngx.log(ngx.ERR, "failed to send ping: ", err)
                return ngx.exit(444)
            end
        elseif typ == "close" then break
        elseif typ == "ping" then
            local bytes, err = self.wb:send_pong()
            if not bytes then
                ngx.log(ngx.ERR, "failed to send pong: ", err)
                return ngx.exit(444)
            end
        elseif typ == "pong" then
        elseif typ == "text" then
            self:handleMessage(data)
        end
    end
    self.wb:send_close()
end

function WsServer:handleMessage(message)
    local decodedMessage = cjson.decode(message)
    if self.wb.handlers[decodedMessage.type] then
        local status, data = pcall(self.wb.handlers[decodedMessage.type], decodedMessage)
        if not status then
            ngx.log(ngx.ERR, "failed handler ", tostring(data))
        end
    else
        ngx.log(ngx.ERR, "no handler for message type ", decodedMessage.type)
    end
end

function WsServer:enhanceWsClient(websocket)
    websocket.handlers = {}
    function websocket:on(message, handler)
        self.handlers[message] = handler
    end
end

local function getInstance()
    if not instance then
        instance = WsServer:new()
    end
    return instance
end

return {
    getInstance = getInstance
}