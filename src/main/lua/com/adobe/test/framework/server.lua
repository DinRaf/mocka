---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by trifan.
--- DateTime: 20/04/2018 10:49
---
local instance
local copas = require'copas'

local cjson = require 'cjson'

local Server = {}

function Server:new(o)
    o = o or {}
    setmetatable(o, self)
    self.__index = self
    return o
end


local function getInstance()
    if not instance then
        instance = Server:new()
    end
    return instance
end

local function handler(ws)
    local server = getInstance()
    server:enhanceClient(ws)
    server:_registerHandlers(ws)
    while true do
        local message = ws:receive()
        if message then
            local decodedMessage = cjson.decode(message)
            if ws.handlers[decodedMessage.event] then
                local status, data = pcall(ws.handlers[decodedMessage.event], decodedMessage.data)
                if not status then
                    print("failed handler ", tostring(data))
                end
            else
                print( "no handler for message type ", decodedMessage.event)
            end
        else
            ws:close()
            return
        end
    end
end


function Server:start()
    -- create a copas webserver and start listening
    self.server = require'websocket'.server.copas.listen
    {
        -- listen on port 8080
        port = 9333,
        -- the protocols field holds
        --   key: protocol name
        --   value: callback on new connection
        protocols = {
            echo = handler
        },
        default = handler
    }

    -- use the lua-ev loop
    copas.loop()
end

function Server:enhanceClient(ws)
    ws.handlers = {}
    function ws:on(message, handler)
        self.handlers[message] = handler
    end
end

local function handler(ws)
    local server = getInstance()
    server:enhanceClient(ws)
    server:_registerHandlers(ws)
    while true do
        local message = ws:receive()
        if message then
            local decodedMessage = cjson.decode(message)
            if ws.handlers[decodedMessage.event] then
                local status, data = pcall(ws.handlers[decodedMessage.event], decodedMessage.data)
                if not status then
                    print("failed handler ", tostring(data))
                end
            else
                print( "no handler for message type ", decodedMessage.event)
            end
        else
            ws:close()
            return
        end
    end
end

function Server:_registerHandlers(webSocketConnection)
    local parent = self

    webSocketConnection:on("continue", function()
        parent:writeFile("/etc/api-gateway/continue", "continue")
    end)

    webSocketConnection:on("introspect", function(message)
        local content = parent:readFile("/etc/api-gateway/introspection")
        webSocketConnection:send(content)
        parent:writeFile("/etc/api-gateway/introspection", "")
    end)
end


function Server:writeFile(path, content)
    local file = io.open(path, "w") -- r read mode and b binary mode
    if not file then return nil end
    file:write(content)
    file:close()
end

function Server:readFile(path)
    local file = io.open(path, "rb")
    if not file then return nil end
    local content = file:read "*a"
    file:close()
    return content
end



local server = getInstance()
server:start()
